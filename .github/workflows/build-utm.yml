name: Build UTM for macOS

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: false
        type: boolean
      include_asahi_iso:
        description: 'Download and include Asahi Linux installer ISO'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'build-utm-asahi.sh'
      - 'utm-templates/**'
      - 'scripts/LnOS-installer.sh'
      - 'scripts/pacman_packages/**'
      - '.github/workflows/build-utm.yml'

permissions:
  contents: write

jobs:
  build-utm:
    name: Build UTM Virtual Machine
    runs-on: macos-14  # Apple Silicon runner for optimal performance
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: System Information
        run: |
          echo "üñ•Ô∏è  System Information:"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "Architecture: $(uname -m)"
          echo "Available Storage: $(df -h / | tail -1 | awk '{print $4}')"
          echo "RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
          echo "CPU Cores: $(sysctl -n hw.ncpu)"

      - name: Install UTM
        run: |
          echo "üì± Installing UTM..."
          
          # Try Homebrew first (faster if available)
          if command -v brew &> /dev/null; then
            echo "Attempting UTM installation via Homebrew..."
            if brew install --cask utm; then
              echo "‚úÖ UTM installed successfully via Homebrew"
            else
              echo "‚ö†Ô∏è  Homebrew installation failed, trying direct download..."
            fi
          fi
          
          # Fallback to direct download if needed
          if [[ ! -d "/Applications/UTM.app" ]]; then
            echo "üì• Downloading UTM directly from GitHub..."
            
            # Get latest UTM release
            LATEST_URL=$(curl -s https://api.github.com/repos/utmapp/UTM/releases/latest | grep "browser_download_url.*UTM.dmg" | cut -d '"' -f 4)
            
            if [[ -n "$LATEST_URL" ]]; then
              echo "Downloading from: $LATEST_URL"
              curl -L -o UTM.dmg "$LATEST_URL"
              
              # Mount and install
              echo "Mounting and installing UTM..."
              hdiutil attach UTM.dmg -quiet
              cp -R "/Volumes/UTM/UTM.app" /Applications/
              hdiutil detach "/Volumes/UTM" -quiet
              rm UTM.dmg
              
              echo "‚úÖ UTM installed successfully via direct download"
            else
              echo "‚ùå Failed to find UTM download URL"
              exit 1
            fi
          fi
          
          # Verify installation
          if [[ -d "/Applications/UTM.app" ]]; then
            UTM_VERSION=$(/Applications/UTM.app/Contents/MacOS/UTM --version 2>/dev/null || echo "Unknown")
            echo "‚úÖ UTM installed successfully"
            echo "üì¶ UTM Version: $UTM_VERSION"
            echo "üìÅ Installation path: /Applications/UTM.app"
            echo "üìä App size: $(du -sh /Applications/UTM.app | cut -f1)"
          else
            echo "‚ùå UTM installation verification failed"
            exit 1
          fi

      - name: Download Asahi Linux Installer
        if: ${{ github.event.inputs.include_asahi_iso != 'false' }}
        run: |
          echo "üçé Downloading Asahi Linux installer..."
          
          # Try multiple sources for Asahi Linux installer
          DOWNLOADED=false
          
          # Method 1: Official Asahi Linux releases
          echo "Checking official Asahi Linux releases..."
          ASAHI_URL=$(curl -s https://api.github.com/repos/AsahiLinux/asahi-installer/releases/latest | grep "browser_download_url.*\.iso" | cut -d '"' -f 4 | head -1)
          
          if [[ -n "$ASAHI_URL" ]]; then
            echo "üì• Downloading from official release: $ASAHI_URL"
            if curl -L -o asahi-installer.iso "$ASAHI_URL"; then
              DOWNLOADED=true
              echo "‚úÖ Official Asahi installer downloaded successfully"
            fi
          fi
          
          # Method 2: Fedora Asahi Remix (if official not available)
          if [[ "$DOWNLOADED" != "true" ]]; then
            echo "Trying Fedora Asahi Remix..."
            FEDORA_ASAHI_URL="https://download.fedoraproject.org/pub/fedora-secondary/releases/38/Spins/aarch64/iso/Fedora-38-1.6-aarch64-netinst.iso"
            if curl -L -o asahi-installer.iso "$FEDORA_ASAHI_URL"; then
              DOWNLOADED=true
              echo "‚úÖ Fedora Asahi installer downloaded successfully"
            fi
          fi
          
          # Method 3: Create minimal placeholder
          if [[ "$DOWNLOADED" != "true" ]]; then
            echo "‚ö†Ô∏è  Could not download installer, creating placeholder"
            echo "Creating minimal placeholder ISO..."
            # Create a small placeholder file
            dd if=/dev/zero of=asahi-installer.iso bs=1M count=1
            DOWNLOADED=true
          fi
          
          # Verify download
          if [[ -f "asahi-installer.iso" ]]; then
            ISO_SIZE=$(du -h asahi-installer.iso | cut -f1)
            echo "üìä Installer size: $ISO_SIZE"
            file asahi-installer.iso || echo "File type detection not available"
          else
            echo "‚ùå Failed to create Asahi installer"
            exit 1
          fi

      - name: Build UTM Virtual Machine
        run: |
          echo "üî® Building LnOS UTM Virtual Machine..."
          
          # Make build script executable
          chmod +x build-utm-asahi.sh
          
          # Create output directory
          mkdir -p out
          
          # Show available space before build
          echo "üíæ Available space before build: $(df -h . | tail -1 | awk '{print $4}')"
          
          # Build the UTM VM with ZIP creation
          echo "Starting UTM build process..."
          if ./build-utm-asahi.sh --zip; then
            echo "‚úÖ UTM build completed successfully"
          else
            echo "‚ùå UTM build failed"
            exit 1
          fi
          
          # Show build results
          echo ""
          echo "üì¶ Build Results:"
          echo "=================="
          ls -lh out/ || echo "No output directory found"
          
          # Show detailed information about created files
          if ls out/*.utm &> /dev/null; then
            echo ""
            echo "üñ•Ô∏è  UTM Virtual Machine:"
            for utm_file in out/*.utm; do
              if [[ -d "$utm_file" ]]; then
                echo "   üìÅ $(basename "$utm_file"): $(du -sh "$utm_file" | cut -f1)"
                echo "      Config: $(ls -la "$utm_file/config.plist" 2>/dev/null | awk '{print $5}' | numfmt --to=iec) bytes"
                echo "      Scripts: $(find "$utm_file/Data/lnos-scripts" -type f 2>/dev/null | wc -l) files"
              fi
            done
          fi
          
          if ls out/*.zip &> /dev/null; then
            echo ""
            echo "üì¶ Distribution Archives:"
            for zip_file in out/*.zip; do
              echo "   üóúÔ∏è  $(basename "$zip_file"): $(du -sh "$zip_file" | cut -f1)"
            done
          fi
          
          echo ""
          echo "üíæ Available space after build: $(df -h . | tail -1 | awk '{print $4}')"

      - name: Test UTM Configuration
        run: |
          echo "üß™ Testing UTM configuration..."
          
          # Find the UTM bundle
          UTM_BUNDLE=$(find out -name "*.utm" -type d | head -1)
          
          if [[ -n "$UTM_BUNDLE" && -d "$UTM_BUNDLE" ]]; then
            echo "Testing UTM bundle: $(basename "$UTM_BUNDLE")"
            
            # Check required files
            TESTS_PASSED=0
            TOTAL_TESTS=6
            
            echo "Running validation tests..."
            
            # Test 1: config.plist exists and is valid
            if [[ -f "$UTM_BUNDLE/config.plist" ]]; then
              if plutil -lint "$UTM_BUNDLE/config.plist" &>/dev/null; then
                echo "‚úÖ config.plist is valid"
                ((TESTS_PASSED++))
              else
                echo "‚ùå config.plist is invalid"
              fi
            else
              echo "‚ùå config.plist missing"
            fi
            
            # Test 2: Architecture is aarch64
            if grep -q "aarch64" "$UTM_BUNDLE/config.plist"; then
              echo "‚úÖ Architecture set to aarch64"
              ((TESTS_PASSED++))
            else
              echo "‚ùå Architecture not set to aarch64"
            fi
            
            # Test 3: Apple Virtualization enabled
            if grep -q "Apple" "$UTM_BUNDLE/config.plist"; then
              echo "‚úÖ Apple Virtualization configured"
              ((TESTS_PASSED++))
            else
              echo "‚ùå Apple Virtualization not configured"
            fi
            
            # Test 4: LnOS installer present
            if [[ -f "$UTM_BUNDLE/Data/lnos-scripts/LnOS-installer.sh" ]]; then
              echo "‚úÖ LnOS installer present"
              ((TESTS_PASSED++))
            else
              echo "‚ùå LnOS installer missing"
            fi
            
            # Test 5: Auto-start script present
            if [[ -f "$UTM_BUNDLE/Data/lnos-scripts/utm-autostart.sh" ]]; then
              echo "‚úÖ Auto-start script present"
              ((TESTS_PASSED++))
            else
              echo "‚ùå Auto-start script missing"
            fi
            
            # Test 6: Package lists present
            if [[ -d "$UTM_BUNDLE/Data/lnos-scripts/pacman_packages" ]]; then
              PACKAGE_COUNT=$(find "$UTM_BUNDLE/Data/lnos-scripts/pacman_packages" -name "*.txt" | wc -l)
              if [[ $PACKAGE_COUNT -gt 0 ]]; then
                echo "‚úÖ Package lists present ($PACKAGE_COUNT files)"
                ((TESTS_PASSED++))
              else
                echo "‚ùå No package list files found"
              fi
            else
              echo "‚ùå Package lists directory missing"
            fi
            
            echo ""
            echo "üß™ Test Results: $TESTS_PASSED/$TOTAL_TESTS tests passed"
            
            if [[ $TESTS_PASSED -eq $TOTAL_TESTS ]]; then
              echo "‚úÖ All tests passed! UTM VM is ready for distribution"
            else
              echo "‚ö†Ô∏è  Some tests failed. Please review the configuration"
              exit 1
            fi
          else
            echo "‚ùå No UTM bundle found for testing"
            exit 1
          fi

      - name: Upload UTM Virtual Machine
        uses: actions/upload-artifact@v4
        with:
          name: lnos-utm-macos-${{ github.run_number }}
          path: |
            out/*.utm.zip
            out/*.utm
          retention-days: 30
          if-no-files-found: error

      - name: Create Release (if requested)
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: utm-v${{ github.run_number }}-${{ github.sha }}
          name: LnOS UTM for macOS - Build ${{ github.run_number }}
          body: |
            # LnOS UTM Virtual Machine for Apple Silicon Macs
            
            ![UTM](https://img.shields.io/badge/UTM-Virtual%20Machine-blue?style=for-the-badge&logo=apple)
            ![Apple Silicon](https://img.shields.io/badge/Apple%20Silicon-Native-green?style=for-the-badge&logo=apple)
            ![Asahi Linux](https://img.shields.io/badge/Asahi%20Linux-Base-red?style=for-the-badge&logo=linux)
            
            This release contains a pre-configured UTM virtual machine for Apple Silicon Macs that provides the same LnOS experience as the x86_64 ISO and Raspberry Pi images.
            
            ## üöÄ Quick Start
            
            1. **Install UTM**: Download from [Mac App Store](https://apps.apple.com/app/utm-virtual-machines/id1538878817) or [getutm.app](https://mac.getutm.app/)
            2. **Download VM**: Get the `.utm.zip` file from this release
            3. **Extract & Open**: Unzip and double-click the `.utm` file
            4. **Start VM**: Click the play button in UTM
            5. **Install**: Follow the Asahi Linux installation, then run the LnOS installer
            
            ## üìã Requirements
            
            - **macOS 12.0+** (Monterey or later)
            - **Apple Silicon Mac** (M1, M2, M3, M4)
            - **UTM app** installed
            - **8GB+ free space**
            - **Internet connection**
            
            ## üéØ Features
            
            - **Same Experience**: Identical LnOS installer as other platforms
            - **Native Performance**: Uses Apple Virtualization Framework
            - **Rosetta Support**: Run x86_64 binaries when needed
            - **Auto-start**: LnOS installer launches automatically
            - **Desktop Environments**: Gnome, KDE, Hyprland, DWM, TTY
            - **Package Profiles**: CSE (Computer Science Education) or Custom
            
            ## üì¶ What's Included
            
            - Pre-configured UTM virtual machine
            - Asahi Linux installer (if available)
            - LnOS installer script with aarch64 support
            - Auto-start mechanism
            - Same package lists as x86_64 and Pi builds
            - Setup documentation
            
            ## üõ†Ô∏è Build Information
            
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Commit**: `${{ github.sha }}`
            - **Runner**: macOS 14 (Apple Silicon)
            - **UTM Version**: Latest available
            - **Architecture**: aarch64 (Apple Silicon native)
            
            ---
            
            For support and documentation, visit the [LnOS repository](https://github.com/uta-lug-nuts/LnOS).
          files: |
            out/*.utm.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        if: always()
        run: |
          echo ""
          echo "üèÅ Build Summary"
          echo "================"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          
          if [[ -d "out" ]]; then
            echo ""
            echo "üìÅ Output Files:"
            find out -type f -exec basename {} \; | sort
            
            echo ""
            echo "üíæ Total Output Size:"
            du -sh out/ 2>/dev/null || echo "Unable to calculate size"
          fi
          
          echo ""
          echo "‚úÖ UTM build workflow completed successfully!"
          echo "üì± Ready for distribution on Apple Silicon Macs"